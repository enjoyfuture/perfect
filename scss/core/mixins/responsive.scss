/**
* 响应式和媒体查询，设备大小分界点为
{
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
}
 */

/**
* 返回响应式设备大小的下一个名称值
* $name 当前值
* $responsive 响应式布局列表值
* $responsive-names 对应的所有键
* 比如 responsive-next(sm)  结果为 md
* responsive-next(sm, (xs: 0, sm: 576px, md: 768px)) 结果为 md
* responsive-next(sm, $responsive-names: (xs sm md)) 结果为 md
* responsive-next(md, $responsive-names: (xs sm md)) 结果为 null
 */
@function responsive-next($name, $responsive: $grid-responsive, $responsive-names: map-keys($responsive)) {
  $n: index($responsive-names, $name);
  @return if($n < length($responsive-names), nth($responsive-names, $n + 1), null);
}

/**
* 根据键返回响应式对应的媒体查询区间值的最小值， 如果没找到或值为0返回 null
* responsive-min(sm, (xs: 0, sm: 576px, md: 768px)) 结果为 576px
* responsive-min(xs, (xs: 0, sm: 576px, md: 768px)) 结果为 null
 */
@function responsive-min($name, $responsive: $grid-responsive) {
  $min: map-get($responsive, $name);
  @return if($min != 0, $min, null);
}

/**
* 根据键返回响应式对应的媒体查询区间值的最大值（即为下一个拐点值 - 1px）， 如果没找到返回 null
* responsive-max(sm, (xs: 0, sm: 576px, md: 768px)) 结果为 767px
* responsive-max(md, (xs: 0, sm: 576px, md: 768px)) 结果为 null
 */
@function responsive-max($name, $responsive: $grid-responsive) {
  $next: responsive-next($name, $responsive);
  @return if($next, responsive-min($next, $responsive) - 1px, null);
}

/**
* 如果 $name 为响应式最小值对应的键，怎返回一个空字符串，否则返回键前面加一个破折号，
* responsive-infix(xs, (xs: 0, sm: 576px, md: 768px)) 结果为 ""
* responsive-infix(md, (xs: 0, sm: 576px, md: 768px)) 结果为 "-md"
 */
@function responsive-infix($name, $responsive: $grid-responsive) {
  @return if(responsive-min($name, $responsive) == null, "", "-#{$name}");
}

/**
* 如果 $name 为最小值，即 xs 时，则不用媒体查询输出样式，否则为媒体查询输出，
* 并设置其最小宽度，即当设备宽度达到该值时，应用定义的该样式
.test {
  @include media-responsive-up(sm) {
    color: red;
  }
}
输出结果为
@media (min-width: 576px) {
  .test {
    color: red;
  }
}

.test {
  @include media-responsive-up(sm) {
    color: red;
  }
}
输出结果为
.test {
  color: red;
}
 */
@mixin media-responsive-up($name, $responsive: $grid-responsive) {
  $min: responsive-min($name, $responsive);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

/**
* 跟 media-responsive-up 相反 如果 $name 为最大值，即 xl 时，则使用媒体查询输出样式，否则不用媒体查询输出，
* 并设置其最大宽度，即当设备宽度小于等于该值时，应用定义的该样式
.test {
  @include media-responsive-down(sm) {
    color: red;
  }
}
输出结果为
@media (max-width: 767px) {
  .test {
    color: red;
  }
}

.test {
  @include media-responsive-down(xl) {
    color: red;
  }
}
输出结果为
.test {
  color: red;
}
 */
@mixin media-responsive-down($name, $responsive: $grid-responsive) {
  $max: responsive-max($name, $responsive);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

/**
* 设置媒体查询最大和最小区间样式
.test {
  @include media-responsive-between(sm, lg) {
    color: red;
  }
}
输出结果为
@media (min-width: 576px) and (max-width: 1199px) {
  .test {
    color: red;
  }
}
 */
@mixin media-responsive-between($lower, $upper, $responsive: $grid-responsive) {
  @include media-responsive-up($lower, $responsive) {
    @include media-responsive-down($upper, $responsive) {
      @content;
    }
  }
}

// Media between the responsive's minimum and maximum widths.
// No minimum for the smallest responsive, and no maximum for the largest one.
// Makes the @content apply only to the given responsive, not viewports any wider or narrower.

/**
* 设置某一媒体查询区间最大和最小区间样式，比如 sm 的区间为 576px  767px
.test {
  @include media-responsive-only(sm) {
    color: red;
  }
}
输出结果为
@media (min-width: 576px) and (max-width: 767px) {
  .test {
    color: red;
  }
}
 */
@mixin media-responsive-only($name, $responsive: $grid-responsive) {
  @include media-responsive-between($name, $name, $responsive) {
    @content;
  }
}

/* 如果我们不使用响应式布局时，即把变量值 $enable-responsive 设为 false 时，*/
@mixin no-media-responsive() {
  @content;
}

